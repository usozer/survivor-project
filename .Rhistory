v <- read_csv("data/visits.csv")
pvs <- read_csv("data/pvs.csv")
v <- v %>% mutate(est=as_datetime(est),
device=as_factor(device),
src=as_factor(src))
pvs
sum(!(v$visitNumber %in% pvs$visitNumber))
vtest <- v %>% filter(train==0)
vv_train <- left_join(v, pvs, by=c("fullVisitorId", "visitNumber")) %>%
filter(!is.na(tag), train==1) %>%
group_by(fullVisitorId, tag) %>%
summarise(count=n()) %>%
as.data.frame()
vv_test <- v %>% filter(train==0)
vv_mat <- as(vv_train, "realRatingMatrix")
vv_mat <- normalize(vv_mat, method="center")
v2<- v %>%
mutate(session = row_number()) %>%
select(fullVisitorId, visitNumber, session, est, device, src)
v2<- v %>%
mutate(session = row_number()) %>%
select(fullVisitorId, visitNumber, session, est, device, src)
v %>%
mutate(session = row_number()) %>%
select(fullVisitorId, visitNumber, session, est, device, src)
v
v %>%
mutate(session = row_number()) %>%
select(fullVisitorId, visitNumber, est, device, src)
v %>%
mutate(session = row_number())
v %>%
mutate(session = row_number()) %>%
select(fullVisitorId, visitNumber, est, device, src)
v %>%
mutate(session = row_number()) %>%
select(c(fullVisitorId, visitNumber, est, device, src))
v %>%
mutate(session = row_number())
v %>%
mutate(session = row_number()) %>%
select(-train)
v %>%
mutate(session = row_number()) %>%
select(-"train")
select <- dplyr::select
v %>%
mutate(session = row_number()) %>%
select(-"train")
v %>%
mutate(session = row_number()) %>%
select(-"train")
vv <- left_join(v2, pvs, by=c("fullVisitorId", "visitNumber")) %>%
filter(!is.na(tag))
v2<-v %>%
mutate(session = row_number()) %>%
select(-"train")
vv <- left_join(v2, pvs, by=c("fullVisitorId", "visitNumber")) %>%
filter(!is.na(tag))
vv$time <- cut(hour(vv$est), breaks = c(0, 6, 12, 18, 23), labels = c("m", "a", "e", "n"), include.lowest = T)
vv %>%
group_by(fullVisitorId, tag) %>%
summarise(count=n()) %>%
as.data.frame()
pop <- vv %>% group_by(tag) %>% summarise(count=n()) %>% arrange(desc(count)) %>% pull(tag)
vvv<- vv %>%
group_by(fullVisitorId, tag) %>%
summarise(count=n()) %>%
arrange(desc(count), .by_group = T) %>%
mutate(rank=row_number()) %>%
ungroup() %>%
filter(rank <= 8) %>%
select(fullVisitorId, tag, rank) %>%
pivot_wider(id_cols=fullVisitorId, names_from=rank, values_from=tag)
x<-as.matrix(select(vvv, -fullVisitorId))
dimnames(x)[[1]] <- vvv$fullVisitorId
# Fill in with popular
for (i in 1:nrow(x)) {
curind <- min(which(is.na(x[i,])))
if (curind %in% 1:8) {
x[i, curind:8] <- pop[1:(9-curind)]
}
}
pages <- vv %>% group_by(session) %>% summarise(count=n()) %>% pull(count)
hist(pages)
table(pages)
tags <- vv %>%
select(session, tag) %>%
mutate(status=1) %>%
unique() %>%
pivot_wider(id_cols=session, names_from=tag, names_prefix="tag", values_from=status, names_sort=T, values_fill=0)
x2 <- as.matrix(select(tags, -session))
dimnames(x2)[[1]] <- tags$session
match <- unique(select(vv, session, fullVisitorId))
testrows <- sample(rownames(x2), 1000)
percs <- rep(0, 1000)
for (i in 1:1000) {
p <- testrows[i]
percs[i] <- sum(which(x2[as.character(p),]==1) %in% x4[filter(match, session==p)$fullVisitorId, ])/sum(x2[as.character(p),])
}
percs[i] <- sum(which(x2[as.character(p),]==1) %in% xw[filter(match, session==p)$fullVisitorId, ])/sum(x2[as.character(p),])
percs <- rep(0, 1000)
for (i in 1:1000) {
p <- testrows[i]
percs[i] <- sum(which(x2[as.character(p),]==1) %in% x2[filter(match, session==p)$fullVisitorId, ])/sum(x2[as.character(p),])
}
rec1 <- vv %>% mutate(wts=ifelse(time=="m" ,3,1))
pop1 <- rec1 %>% group_by(tag) %>% summarise(count=sum(wts)) %>% arrange(desc(count)) %>% pull(tag)
vvv1 <- rec1 %>%
group_by(fullVisitorId, tag) %>%
summarise(count=sum(wts)) %>%
arrange(desc(count), .by_group = T) %>%
mutate(rank=row_number()) %>%
ungroup() %>%
filter(rank <= 8) %>%
select(fullVisitorId, tag, rank) %>%
pivot_wider(id_cols=fullVisitorId, names_from=rank, values_from=tag)
x1<-as.matrix(select(vvv1, -fullVisitorId))
dimnames(x1)[[1]] <- vvv1$fullVisitorId
for (i in 1:nrow(x)) {
curind <- min(which(is.na(x1[i,])))
if (curind %in% 1:8) {
x1[i, curind:8] <- pop1[1:(9-curind)]
}
}
rec2 <- vv %>% mutate(wts=ifelse(time=="a" ,3,1))
pop2 <- rec2 %>% group_by(tag) %>% summarise(count=sum(wts)) %>% arrange(desc(count)) %>% pull(tag)
vvv2 <- rec2 %>%
group_by(fullVisitorId, tag) %>%
summarise(count=sum(wts)) %>%
arrange(desc(count), .by_group = T) %>%
mutate(rank=row_number()) %>%
ungroup() %>%
filter(rank <= 8) %>%
select(fullVisitorId, tag, rank) %>%
pivot_wider(id_cols=fullVisitorId, names_from=rank, values_from=tag)
x2<-as.matrix(select(vvv2, -fullVisitorId))
dimnames(x2)[[1]] <- vvv2$fullVisitorId
for (i in 1:nrow(x)) {
curind <- min(which(is.na(x2[i,])))
if (curind %in% 1:8) {
x2[i, curind:8] <- pop2[1:(9-curind)]
}
}
rec3 <- vv %>% mutate(wts=ifelse(time=="e" ,3,1))
pop3 <- rec3 %>% group_by(tag) %>% summarise(count=sum(wts)) %>% arrange(desc(count)) %>% pull(tag)
vvv3 <- rec3 %>%
group_by(fullVisitorId, tag) %>%
summarise(count=sum(wts)) %>%
arrange(desc(count), .by_group = T) %>%
mutate(rank=row_number()) %>%
ungroup() %>%
filter(rank <= 8) %>%
select(fullVisitorId, tag, rank) %>%
pivot_wider(id_cols=fullVisitorId, names_from=rank, values_from=tag)
x3<-as.matrix(select(vvv3, -fullVisitorId))
dimnames(x3)[[1]] <- vvv3$fullVisitorId
for (i in 1:nrow(x)) {
curind <- min(which(is.na(x3[i,])))
if (curind %in% 1:8) {
x3[i, curind:8] <- pop3[1:(9-curind)]
}
}
rec4 <- vv %>% mutate(wts=ifelse(time=="n" ,3,1))
pop4 <- rec4 %>% group_by(tag) %>% summarise(count=sum(wts)) %>% arrange(desc(count)) %>% pull(tag)
vvv4 <- rec4 %>%
group_by(fullVisitorId, tag) %>%
summarise(count=sum(wts)) %>%
arrange(desc(count), .by_group = T) %>%
mutate(rank=row_number()) %>%
ungroup() %>%
filter(rank <= 8) %>%
select(fullVisitorId, tag, rank) %>%
pivot_wider(id_cols=fullVisitorId, names_from=rank, values_from=tag)
x4<-as.matrix(select(vvv4, -fullVisitorId))
dimnames(x4)[[1]] <- vvv4$fullVisitorId
for (i in 1:nrow(x)) {
curind <- min(which(is.na(x4[i,])))
if (curind %in% 1:8) {
x4[i, curind:8] <- pop4[1:(9-curind)]
}
}
vtest <- as.data.frame(vtest)
for (t in paste0("tag", 1:8)) {
vtest[[t]] = rep(0, nrow(vtest))
}
for (i in 1:nrow(vtest)) {
if (!(vtest[i,1] %in% dimnames(x1)[[1]])) {
vtest[i,8:15] = pop[1:8]
next
}
if (vtest[i,7] == "m") {
vtest[i, 8:15] = x1[vtest[i,1],]
} else if (vtest[i,7] == "a"){
vtest[i, 8:15] = x2[vtest[i,1],]
} else if (vtest[i,7] == "e"){
vtest[i, 8:15] = x3[vtest[i,1],]
} else if (vtest[i,7] == "n"){
vtest[i, 8:15] = x4[vtest[i,1],]
}
}
write_csv(vtest[,c(1,2,8:15)], "chicago5_preds.csv")
?left_join
c("10231:10231", "9432:9432", "5:5", "04:04")
pp<-c("10231:10231", "9432:9432", "5:5", "04:04")
str_extract(pp, "(\\d+?):\\1"))
str_extract(pp, "(\\d+?):\\1")
str_match(pp, "(\\d+?):\\1")
str_match(pp, "(\\d+?):\\1")[,2]
?str_extract
knitr::opts_chunk$set(echo = FALSE,comment="  ")
#library(boot)
#library(MASS)
#library(car)
library(nnet)
#library(ALEPlot)
#library(rpart)
#library(glue)
library(mgcv)
library(yaImpute)
library(randomForest)
library(gbm)
library(tidyverse)
##### PROBLEM 1 #####
##### (a) ######
heart <- readxl::read_excel("HW2_data.xls", sheet=1, col_names = TRUE)
heart$...1 <- NULL
heart2 <- heart
heart2[2:9]<-sapply(heart2[2:9], function(x) (x-mean(x))/sd(x)) #standardize predictors
heart2[1] <- log10(heart2[1])
names(heart2)[1] <- "logcost"
##### PROBLEM 6 #####
##### (a) #####
fit_gbm <- gbm(logcost~., distribution = "gaussian", data=heart2, cv.folds = 10)
perf <- gbm.perf(fit_gbm, method="cv",plot.it = TRUE)
1-fit_gbm$cv.error[perf]/var(heart2$logcost)
?summary.gbm
sample(c(0,2), 8)
?sample
?pnorm
rnorm(100)
?ttest
?binomial
?rbinom
?t.test
?anova
knitr::opts_chunk$set(echo = TRUE)
library(car)
library(cluster)
library(survival)
library(glmnet)
library(psych)
library(gbm)
library(tidyverse)
df <- read_csv("churnclass.csv.gz")
df <- df %>%
mutate(sessions=mobile+tablet+desktop+app+other)
df <- read_csv("churnclass.csv.gz")
df <- df %>%
mutate(sessions=mobile+tablet+desktop+app+other)
anova(mobile~tablet, df)
anova(mobile~tablet, data=df)
anova(lm(mobile~tablet), data=df)
anova(lm(mobile~tablet, data=df), data=df)
?rpois
rpois(20,2)
rexp(20,2)
rpois(20,2)
rnorm(150,33,3)
?slice_sample
library(data.table)
?cbind
?order
setwd("~/SurvivorPred/")
source("fns_normalized.R")
library(gbm)
train <- df_norm[,4:11]
train$winner <- factor(train$winner)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=1000,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
verbose=FALSE)
gbm.perf(fit_gbm)
fit_gbm$train.error
train$winner <- as.numeric(train$winner)-1
train
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=1000,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
verbose=FALSE)
fit_gbm$train.error
perf.gbm(fit_gbm)
gbm.perf(fit_gbm)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=1000,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
gbm.perf(fit_gbm)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=1000,
shrinkage=0.037,
interaction.depth=2,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
gbm.perf(fit_gbm)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=1000,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
yhat=matrix(0,nrow(df_norm),n.models)
yhat=matrix(0,nrow(df_norm),1)
yhat
for (k in 1:K) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
yhat[test_ind,cur] <- generateWinner(k, fit_gbm, type="response", n.trees=gbm.perf(out, plot.it=FALSE))
} #end of k loop
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
yhat[test_ind,cur] <- generateWinner(k, fit_gbm, type="response", n.trees=gbm.perf(out, plot.it=FALSE))
} #end of k loop
generateWinner <- function(seasonno, fit, type, ...) {
p<- df_norm %>%
filter(season == seasonno) %>%
mutate(f = predict(fit, ., type, ...)) %>%
mutate(predicted= as.numeric(f==max(f)))
return(pull(p, predicted))
}
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
yhat[test_ind,cur] <- generateWinner(k, fit_gbm, type="response", n.trees=gbm.perf(out, plot.it=FALSE))
} #end of k loop
gbm.perf(fit_gbm)
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
yhat[test_ind,cur] <- generateWinner(k, fit_gbm, type="response", n.trees=21)
} #end of k loop
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
yhat[test_ind,1] <- generateWinner(k, fit_gbm, type="response", n.trees=21)
} #end of k loop
yhat
y
y=df_norm$winner
y
c(yhat)
y==c(yhat)
sum(y!=c(yhat))/105
df_norm %>%
mutate(predicted=c(yhat))
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==1 & predicted==0)
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==0 & predicted==1)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=100,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
gbm.perf(fit_gbm)
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==0 & predicted==1)
# Random forest
library(randomForest)
?randomForest
train <- df_norm[,4:11]
train
yhat=matrix(0,nrow(df_norm),1)
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=100,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
yhat[test_ind,1] <- generateWinner(k, fit_gbm, type="response", n.trees=gbm.perf(fit_gbm, plot.it = FALSE))
} #end of k loop
df_norm %>%
mutate(predicted=c(yhat))
c(yhat) == y
sum(c(yhat) == y)/105
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==1 & predicted==0)
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==0 & predicted==1)
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(winner==1 & predicted==1)
df_norm %>%
mutate(predicted=c(yhat)) %>%
filter(predicted==1)
yhat=matrix(0,nrow(df_norm),1)
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=100,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
yhat[test_ind,1] <- generateWinner(k, fit_gbm, type="raw", n.trees=gbm.perf(fit_gbm, plot.it = FALSE))
} #end of k loop
yhat=matrix(0,nrow(df_norm),1)
yhat
for (k in 1:40) {
train_ind <- filter(df_norm, season != k) %>% pull(sid)
train <- df_norm[train_ind,-(1:3)]
test_ind <- filter(df_norm, season == k) %>% pull(sid)
fit_gbm<- gbm(winner~., data=train, var.monotone=NULL,
distribution = "bernoulli",
n.trees=100,
shrinkage=0.037,
interaction.depth=3,
bag.fraction = .5,
n.minobsinnode = 2,
cv.folds=10,
verbose=FALSE)
yhat[test_ind,1] <- generateWinner(k, fit_gbm, type="response", n.trees=gbm.perf(fit_gbm, plot.it = FALSE))
} #end of k loop
df_norm %>%
mutate(predicted=c(yhat))
sum(c(yhat))
knitr::opts_chunk$set(echo = FALSE,comment="  ")
library(boot)
library(tidyverse)
library(glue)
##### QUESTION 2 #####
rxn <- readxl::read_xls('HW1_data.xls')
rxn <- rxn %>% mutate(a=1/x, b=1/y)
lnfit <- lm(b~a, data=rxn)
summary(lnfit)
gammas <- rep(0,2)
gammas[1] <- 1/lnfit$coefficients[1]
gammas[2] <- lnfit$coefficients[2]*gammas[1]
print(gammas)
fn <- function(p) {yhat <- rxn$x*p[1]/(p[2]+rxn$x); return(sum((rxn$y-yhat)^2))}
nlfit <- nlm(fn, p=gammas, hessian=TRUE)
print(nlfit$estimate)
nls_fn <- function(x, p) return(x*p[1]/(p[2]+x))
nlfit2 <- nls(y~nls_fn(x, p), data = rxn, start = list(p = gammas))
print(nlfit2$m$getAllPars())
##### QUESTION 4 #####
bootfn <- function(df, i, theta) {
Zboot <- df[i,]
x <- Zboot[[2]]; y <- Zboot[[1]]
fn <- function(p) {yhat <- x*p[1]/(p[2]+x); return(sum((y-yhat)^2))}
nlfit <- nlm(fn, p=theta, hessian=TRUE)
return(nlfit$estimate)
}
myboot <- boot(rxn, bootfn, theta=gammas, R=20000)
par(mfrow=c(1,2))
hist(myboot$t[,1], breaks=80, main = "Bootstrapped distribution of gamma0", xlab = "gamma0")
hist(myboot$t[,2], breaks=80, main = "Bootstrapped distribution of gamma1", xlab = "gamma1")
SE0 <- sqrt(var(myboot$t[,1]))
SE1 <- sqrt(var(myboot$t[,2]))
glue("SE of gamma0:
{round(SE0,4)}
SE of gamma1:
{round(SE1,3)}")
myboot
myboot$t0
myboot$t
